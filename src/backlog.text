[] создать логированные переходы в навигации
[] исправить глобальные стили
[] вернуть alias @
[] проверить сборку проекта 
    npx tailwindcss -i ./src/input.css -o ./src/output.css --watch
    https://v2.tailwindcss.com/docs/guides/vue-3-vite
    https://v2.tailwindcss.com/docs/optimizing-for-production
[] add darck mode
    https://tailwindcss.com/docs/upgrade-guide#remove-dark-mode-configuration
[] to Navbar add optional style isLogged or notLogged conditions
[] add custon colors to tailwind settings
[] add needed fonts in tailwind settings
[] add .container element to App and fix sizes
[] add font in tailwind
[] add headwind 
[] delete redundant elements , components , vues
[] improve hr lines on every page
[] watch about validation in forms (info in notion)

[] add custom colors tailwind
[] add custom font families tailwind

[] add disable style on button login
[] add warning style on login inputs

[] add get login request

[] adaptive

[] clear all consoles

[] refactor buttons to UI component Button

[] fix all ts errors

[] check and fix all comments in code such as //[] #task

[] fix extrimal html template zoom in/out breakpoints

[] delete all comments

[] try different browsers

[] CHECK all figma to dealed features and complete all

[] Clear all commemts

[] delete unusable components and views

[] rewrite switch case fn to object

[] find out how to add multiple files
[] add different color scheme 3-5 and toggle controls svg colors

[] refactor - replace GET, POST etc axios fetches to separated modules

[] add load file progress bar component

[] add filter buttons realization sortByName/sortByDate/sortBySize with toggle arrows directions ↑↓

[] refactor progress component to Separated UI component
[] add to progress condition success [ Add / Delete / Rename ]
    Файл Название табличного файла.xls успешно загружен with symbol round (v)
[] add to progress condition error  [ Add / Delete / Rename ]
    Файл Название табличного файла.xls не был загружен with red style
[] refactor progressEntity.message to constants

[] HANDLE CASE IF YOU TRY UPLOAD EXISTED FILE (save version(copy))

[] webstorm use

[] linters and IDE settings include 

[] For File Name Inputs Update background COLOR for selected/hover/simple conditions

[] change all parentecies to one style

[] try to add cancel
Добавление функционала отмены процесса загрузки или удаления файла до его завершения может быть достигнуто путем добавления кнопки "Отмена" и соответствующей логики обработчика события клика на эту кнопку. Давайте добавим кнопку "Отмена" и логику для неё.

Добавьте кнопку "Отмена" в элемент, отображающий процесс загрузки или удаления файла. Например:
html
Copy code
<button class="rounded-[2px] focus:outline focus:outline-[3px] focus:outline-stone-300 focus:outline-offset-[3px] focus:border-none" @click="cancelProcess">
    <img src="../assets/cancel.svg" alt="cancel">
</button>
В соответствующих обработчиках событий (handleFileChange и handleFileDelete) добавьте логику для отмены процесса передачи данных на сервер. Внутри методов handleFileChange и handleFileDelete определите новый метод cancelProcess, который будет вызываться при нажатии на кнопку "Отмена". Этот метод будет отменять запрос Axios, используя Axios CancelToken.
Вот пример реализации:

javascript
Copy code
import { CancelToken } from 'axios';

// Внутри вашего компонента Vue
const cancelSource = axios.CancelToken.source();

const handleFileChange = (event) => {
    // ...

    axios.post(`http://localhost:3000/file?filename=${selectedFile.name}`, formData, {
        cancelToken: cancelSource.token, // Передаем токен отмены запроса
        // остальные параметры запроса
    })
    .then(response => {
        // Обработка успешного ответа
    })
    .catch(error => {
        // Обработка ошибки
    })
    .finally(() => {
        // Сброс прогресса и т.д.
    });
}

const handleFileDelete = (item) => {
    // ...

    axios.delete(`http://localhost:3000/file?filename=${item.name}`, {
        cancelToken: cancelSource.token, // Передаем токен отмены запроса
        // остальные параметры запроса
    })
    .then(response => {
        // Обработка успешного ответа
    })
    .catch(error => {
        // Обработка ошибки
    })
    .finally(() => {
        // Сброс прогресса и т.д.
    });
}

const cancelProcess = () => {
    cancelSource.cancel('Запрос отменен пользователем'); // Отменяем запрос с помощью токена отмены
}
Теперь, когда пользователь нажимает на кнопку "Отмена", вызывается метод cancelProcess, который отменяет соответствующий запрос Axios.





